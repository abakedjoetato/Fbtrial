==== AI SYSTEMS COHESION ORDER — PHASED EXECUTION ====

OBJECTIVE: Perform a full bot-wide audit and correction to ensure that **all cogs, models, features, and systems function together as an integrated, stable whole**. This includes inter-command routing, MongoDB model interaction, async task flow, premium checks, and event propagation.

ROLE:  
You are acting as a senior engineering unit in a post-failure system reconstruction effort. Your mission is to identify and resolve **integration failures, missed signal paths, broken dependencies, and faulty subsystem routing.**

No individual command or function can be considered in isolation. This is a **cross-cutting integrity operation**.

---

## [SCOPE OF INTEGRITY TARGETS]

1. **Cog/Command Pipeline Verification**
   - Ensure all commands are routed, registered, and loaded correctly.
   - All decorators, guards, and flags must function as intended.

2. **Database Model Interoperability**
   - MongoDB model functions (insert, update, find) must integrate across commands and state flows.
   - No cross-module mismatches or schema drift allowed.

3. **Async/Sync Integrity**
   - Ensure all `async` functions, tasks, and event handlers do not block the loop or produce uncaught failures.
   - Validate that long-running tasks are offloaded safely.

4. **Premium System Enforcement**
   - Confirm that all premium-gated features obey guild-only logic.
   - No accidental bypasses or user-scoped permission checks may exist.

5. **Multi-Guild State Isolation**
   - Validate that no commands or background tasks assume single-guild context.
   - Confirm that state, sessions, or data are uniquely scoped per guild.

6. **Inter-feature Cooperation**
   - Commands must interact cleanly with shared utilities, cooldown systems, premium validators, and shared state models.
   - Ensure cog separation does not prevent required feature interop.

---

## [RULE ENFORCEMENT — DOCTRINE EXTRACT]

- No monkey patches, no suppressed exceptions, no hotfixes (Rule 6)
- No behavior may change from original output (Rule 3)
- No micro-fixes or isolated “band-aid” logic (Rule 10)
- All fixes must be complete, atomic, and reflect understanding of full system behavior (Rule 1 & 11)

If a fix cannot comply with these rules, return:
`CONSTRAINT ESCALATION REQUIRED — SYSTEM FIX ABORTED`

---

## === PHASE 1: SYSTEM COHESION AUDIT ===

Use `<audit-start>` and `<audit-end>` tags.  
Scan the entire bot and produce:

- A list of integration violations across cogs, commands, models, and state handlers
- Exact file and line references
- What the feature should do vs. what it currently does
- A trace of failed logic flow or blocked routing
- How that failure impacts the bot’s intended functionality

**Do not write any fixes yet.**

---

## === PHASE 2: INTEGRATION FIX PLAN ===

Use `<plan-start>` and `<plan-end>` tags.

For each violation:
- State the intent of the subsystem and where it breaks
- Detail the exact fix steps (per file/module)
- Provide confirmation that the fix **does not violate** any core rules

---

## === PHASE 3: SYSTEM FIX EXECUTION ===

Use `<fix-start>` and `<fix-end>` tags.

Only apply approved, system-safe, behavior-preserving corrections that:
- Do not refactor for performance
- Do not modify command outcomes
- Do not alter architecture or dependency models

---

## === PHASE 4: OPERATIONAL COMPLIANCE CHECKLIST ===

Return:
- [ ] All cog-command-model connections validated?
- [ ] Async flows consistent and loop-safe?
- [ ] Premium logic confined to guild scope?
- [ ] No isolated quick-fix logic used?
- [ ] Full system remains rules.md compliant?

If any answer is “no”, return:
`CONSTRAINT VIOLATION — FIX REJECTED`

---

If the audit reveals system-level integration failures that cannot be fixed without architecture change, return:
```plaintext
CONSTRAINT ESCALATION REQUIRED — SYSTEM-LEVEL REALIGNMENT NEEDED
---

# DESIRED OUTCOME
- Bot must boot cleanly and load all cogs.
- All commands must function identically to original intent.
- Database operations must succeed without silent failures.
- Premium-gated features must respond accurately per-guild.
- Commands must interoperate with state, cooldowns, and handlers.
- No feature may interfere with another via state leakage or task collisions.